/* gstreamer-discoverer-0.10.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gst", lower_case_cprefix = "gst_")]
namespace Gst {
	[CCode (cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public class Discoverer : GLib.Object {
		public bool @async;
		public weak Gst.Bus bus;
		public weak GLib.Error current_error;
		public weak Gst.DiscovererInformation current_info;
		public weak Gst.TagList current_tags;
		public weak Gst.Structure current_topology;
		public GLib.Type decodebin2_type;
		public weak GLib.Mutex @lock;
		public weak GLib.List pending_uris;
		public weak Gst.Bin pipeline;
		public bool running;
		public weak GLib.List streams;
		public weak Gst.Element uridecodebin;
		[CCode (has_construct_function = false)]
		public Discoverer (Gst.ClockTime timeout);
		public bool append_uri (string uri);
		public Gst.DiscovererInformation discover_uri (string uri) throws GLib.Error;
		public void start ();
		public void stop ();
		[NoAccessorMethod]
		public uint64 timeout { get; set construct; }
		public virtual signal void discovered (Gst.DiscovererInformation info, GLib.Error err);
		public virtual signal void ready ();
		public virtual signal void starting ();
	}
	[Compact]
	[CCode (copy_function = "gst_discoverer_information_copy", type_id = "GST_TYPE_DISCOVERER_INFORMATION", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public class DiscovererInformation {
		public Gst.ClockTime duration;
		public weak Gst.Structure misc;
		public Gst.DiscovererResult result;
		public weak Gst.StreamInformation stream_info;
		public weak GLib.List<Gst.StreamInformation> stream_list;
		public weak string uri;
		[CCode (has_construct_function = false)]
		public DiscovererInformation ();
	}
	[Compact]
	[CCode (copy_function = "gst_stream_audio_information_copy", type_id = "GST_TYPE_STREAM_AUDIO_INFORMATION", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public class StreamAudioInformation : Gst.StreamInformation {
		public uint bitrate;
		public uint channels;
		public uint depth;
		public bool is_vbr;
		public uint max_bitrate;
		public uint sample_rate;
		[CCode (has_construct_function = false)]
		public StreamAudioInformation ();
	}
	[Compact]
	[CCode (copy_function = "gst_stream_container_information_copy", type_id = "GST_TYPE_STREAM_CONTAINER_INFORMATION", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public class StreamContainerInformation : Gst.StreamInformation {
		public weak GLib.List streams;
		[CCode (has_construct_function = false)]
		public StreamContainerInformation ();
	}
	[Compact]
	[CCode (copy_function = "gst_stream_information_copy", type_id = "GST_TYPE_STREAM_INFORMATION", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public class StreamInformation {
		public weak Gst.Caps caps;
		public weak Gst.Structure misc;
		public weak Gst.StreamInformation next;
		public weak Gst.StreamInformation previous;
		public Gst.StreamType streamtype;
		public weak Gst.TagList tags;
		[CCode (has_construct_function = false)]
		public StreamInformation ();
	}
	[Compact]
	[CCode (copy_function = "gst_stream_video_information_copy", type_id = "GST_TYPE_STREAM_VIDEO_INFORMATION", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public class StreamVideoInformation : Gst.StreamInformation {
		public uint depth;
		public Gst.VideoFormat format;
		public Gst.Value frame_rate;
		public uint height;
		public bool interlaced;
		public Gst.Value pixel_aspect_ratio;
		public uint width;
		[CCode (has_construct_function = false)]
		public StreamVideoInformation ();
	}
	[CCode (cprefix = "GST_DISCOVERER_", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	[Flags]
	public enum DiscovererResult {
		OK,
		URI_INVALID,
		ERROR,
		TIMEOUT,
		BUSY,
		MISSING_PLUGINS
	}
	[CCode (cprefix = "GST_STREAM_", cheader_filename = "gst/discoverer/gstdiscoverer.h")]
	public enum StreamType {
		CONTAINER,
		AUDIO,
		VIDEO,
		IMAGE,
		UNKNOWN
	}
}
