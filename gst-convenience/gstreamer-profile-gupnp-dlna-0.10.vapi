/* gstreamer-profile-0.10.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gst", lower_case_cprefix = "gst_")]
namespace Gst {
	[Compact]
	[CCode (copy_function = "gst_encoding_profile_copy", type_id = "GST_TYPE_ENCODING_PROFILE", cheader_filename = "gst/profile/gstprofile.h")]
	public class EncodingProfile {
		public weak GLib.List encodingprofiles;
		public weak Gst.Caps format;
		public bool multipass;
		public weak string name;
		public weak string preset;
		[CCode (has_construct_function = false)]
		public EncodingProfile (string name, Gst.Caps format, string? preset, bool multipass);
		public bool add_stream (owned Gst.StreamEncodingProfile stream);
		public unowned Gst.EncodingProfile copy ();
		public unowned Gst.Caps get_codec_caps ();
	}
	[Compact]
	[CCode (cheader_filename = "gst/profile/gstprofile.h")]
	public class EncodingTarget {
		public weak string category;
		public weak string name;
		public weak GLib.List profiles;
	}
	[Compact]
	[CCode (copy_function = "gst_stream_encoding_profile_copy", type_id = "GST_TYPE_STREAM_ENCODING_PROFILE", cheader_filename = "gst/profile/gstprofile.h")]
	public class StreamEncodingProfile {
		public weak Gst.Caps format;
		public uint presence;
		public weak string preset;
		public weak Gst.Caps restriction;
		public Gst.EncodingProfileType type;
		[CCode (has_construct_function = false)]
		public StreamEncodingProfile (Gst.EncodingProfileType type, Gst.Caps format, string? preset, Gst.Caps? restriction, uint presence);
		public unowned Gst.StreamEncodingProfile copy ();
		public unowned Gst.Caps get_output_caps ();
	}
	[Compact]
	[CCode (free_function = "gst_stream_encoding_profile_free", type_id = "GST_TYPE_VIDEO_ENCODING_PROFILE", cheader_filename = "gst/profile/gstprofile.h")]
	public class VideoEncodingProfile : Gst.StreamEncodingProfile {
		public uint pass;
		public weak Gst.StreamEncodingProfile profile;
		public bool vfr;
		[CCode (type = "GstStreamEncodingProfile*", has_construct_function = false)]
		public VideoEncodingProfile (Gst.Caps format, string? preset, Gst.Caps? restriction, uint presence, uint pass);
	}
	[CCode (cprefix = "GST_ENCODING_PROFILE_", cheader_filename = "gst/profile/gstprofile.h")]
	public enum EncodingProfileType {
		UNKNOWN,
		VIDEO,
		AUDIO,
		TEXT,
		IMAGE
	}
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned GLib.List encoding_category_list_target (string category);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned Gst.Element pb_utils_create_encoder (Gst.Caps caps, string? preset, string name);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned Gst.Element pb_utils_create_encoder_format (string format, string preset, string name);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned Gst.Element pb_utils_create_muxer (Gst.Caps caps, string? preset);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned Gst.Element pb_utils_create_muxer_format (string format, string preset, string name);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned GLib.List pb_utils_encoders_compatible_with_muxer (Gst.Element muxer);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned GLib.List pb_utils_muxers_compatible_with_encoder (Gst.Element encoder);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static bool preset_create (Gst.Preset preset, string name, Gst.Structure properties);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static void preset_reset (Gst.Preset preset);
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static unowned GLib.List profile_list_target_categories ();
	[CCode (cheader_filename = "gstreamer-profile-0.10.h")]
	public static bool profile_target_save (Gst.EncodingTarget target);
}
